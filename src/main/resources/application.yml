spring:
  application:
    name: wheretopop-api
  profiles:
    active: ${ACTIVE_PROFILE:dev}
  datasource:
    url: jdbc:mariadb://${DB_HOST:localhost}:${DB_PORT:3306}/${MYSQL_DATABASE:wheretopop}?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
    username: ${MYSQL_USER:root}
    password: ${MYSQL_PASSWORD:password}
    hikari:
      minimum-idle: 5
      maximum-pool-size: 10
      idle-timeout: 30000
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MariaDBDialect
        format_sql: true
    show-sql: false

  ai:
    chat:
      memory:
        repository:
          jdbc:
            initialize-schema: always
            schema: classpath:org/springframework/ai/chat/memory/repository/jdbc/schema-mariadb.sql

    mcp:
      client:
        enabled: true
        initialized: true
        request-timeout: 30s
        toolcallback:
          enabled: true
        type: sync
        stdio:
          connections:
            naver-search-mcp:
              command: npx
              args:
                - -y
                - "@smithery/cli@latest"
                - run
                - "@isnow890/naver-search-mcp"
                - --key
                - ${SMITHERY_API_KEY}
                - --profile
                - jealous-orca-ZTyY94
    #            exa:
    #              command: npx
    #              args:
    #                - -y
    #                - "@smithery/cli@latest"
    #                - run
    #                - "@exa-ai/exa-mcp"
    #                - --key
    #                - ${SMITHERY_API_KEY}
    #                - --profile
    #                - jealous-orca-ZTyY94
    openai:
      api-key: ${OPENAI_API_KEY:your_openai_or_gcp_key}
      base-url: ${OPENAI_BASE_URL:https://api.openai.com/v1}
      #      base-url: https://api.openai.com/v1
      chat:
        completions-path: /chat/completions
        options:
          model: ${OPENAI_MODEL:gpt-4o}
      #          model: gemini-2.0-flash
      #        NOTE: gemini에서 api-key를 통한 인증을 java client에서 지원하지 않음. gcp를 통한 인증을 해야함
      #        따라서 https://ai.google.dev/gemini-api/docs/openai?hl=ko openai 호환을 활용해 호출
      #        https://github.com/spring-projects/spring-ai/issues/1252
      embedding:
        #        base-url: https://generativelanguage.googleapis.com/v1beta/models
        base-url: https://api.openai.com
        options:
          model: text-embedding-ada-002
    #          model: gemini-embedding-exp-03-07

    vectorstore:
      weaviate:
        enabled: true
        scheme: ${VECTOR_DB_SCHEME:http}
        host: ${VECTOR_DB_HOST:localhost}
        port: ${VECTOR_DB_PORT:8081}
        object-class:
          popup: PopupStore
          long-term-memory: LongTermMemory

openapi:
  seoul:
    key: ${SEOUL_OPEN_DATA_API_KEY:your_key}
  korea:
    building-register:
      key: ${KOREA_BUILDING_REGISTER_OPEN_DATA_API_KEY:your_key}
  v-world:
    key: ${V_WORLD_OPEN_API_KEY:your_key}

selenium:
  chrome:
    headless: true
    arguments: --disable-gpu
scraping:
  target:
    url: https://popply.co.kr/popup
    selector:
      firstPopupLink: div.popuplist-board > ul:nth-of-type(1) > li:nth-of-type(1) div.popup-info-wrap > a
  wait:
    timeoutSeconds: 15

server:
  port: ${APP_PORT:8080}
  forward-headers-strategy: native

jwt:
  secret: ${JWT_SECRET:whereToPopSecretKeyForJwtTokenMustBeLongEnoughForHS256Algorithm}
  access-token-expiration: ${JWT_ACCESS_TOKEN_EXPIRATION:3600000} # 1시간
  refresh-token-expiration: ${JWT_REFRESH_TOKEN_EXPIRATION:604800000} # 7일